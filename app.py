# app.py
# Ng·ªçcMinhCh√¢u-AI - Full dashboard theo t√†i li·ªáu (login + dashboard with full features)
# L∆∞u √Ω: c·∫ßn ai_core.py (ai_pipeline) v√† utils.py (send_email, send_zalo_message) c√≥ s·∫µn
# C√†i c√°c package theo requirements.txt

import os
import io
import json
import zipfile
import threading
from pathlib import Path
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

import streamlit as st
from dotenv import load_dotenv

# Load .env n·∫øu c√≥ (local dev)
load_dotenv()

# Try imports optional
try:
    import pandas as pd
except Exception:
    pd = None

try:
    import PyPDF2
except Exception:
    PyPDF2 = None

try:
    from PIL import Image
except Exception:
    Image = None

try:
    import pytesseract
except Exception:
    pytesseract = None

try:
    import speech_recognition as sr
except Exception:
    sr = None

try:
    import docx
except Exception:
    docx = None

try:
    from gtts import gTTS
except Exception:
    gTTS = None

try:
    import matplotlib.pyplot as plt
except Exception:
    plt = None

# import project modules (ai_core, utils)
try:
    from ai_core import ai_pipeline
except Exception as e:
    ai_pipeline = None
    AI_CORE_ERROR = str(e)
else:
    AI_CORE_ERROR = None

try:
    from utils import send_email, send_zalo_message
except Exception as e:
    send_email = None
    send_zalo_message = None

# ------------------------
# Config paths + env
# ------------------------
st.set_page_config(page_title="Ng·ªçcMinhCh√¢u AI", layout="wide", page_icon="üíé")
ROOT = Path.cwd()
INPUT_DIR = ROOT / "input_data"
OUTPUT_DIR = ROOT / "output_data"
HISTORY_DIR = ROOT / "report_history"
LOGS_DIR = ROOT / "logs"
for d in (INPUT_DIR, OUTPUT_DIR, HISTORY_DIR, LOGS_DIR):
    d.mkdir(parents=True, exist_ok=True)
HISTORY_FILE = HISTORY_DIR / "history.json"

OPENAI_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_USER = os.getenv("ADMIN_USER", "admin")
ADMIN_PASS = os.getenv("ADMIN_PASS", "changeme")

# Thread pool for background tasks
executor = ThreadPoolExecutor(max_workers=3)

# ------------------------
# Helpers: history persistence
# ------------------------
def load_history():
    if HISTORY_FILE.exists():
        try:
            return json.loads(HISTORY_FILE.read_text(encoding="utf-8"))
        except Exception:
            return []
    return []

def save_history(h):
    HISTORY_DIR.mkdir(parents=True, exist_ok=True)
    HISTORY_FILE.write_text(json.dumps(h, ensure_ascii=False, indent=2), encoding="utf-8")

def add_history(rec: dict):
    h = load_history()
    h.append(rec)
    save_history(h)

# ------------------------
# Helpers: file extractors (graceful)
# ------------------------
def extract_text_from_pdf(path: Path):
    if PyPDF2 is None:
        return "[PyPDF2 ch∆∞a c√†i]"
    try:
        out = []
        with open(path, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            for p in reader.pages:
                t = p.extract_text()
                if t:
                    out.append(t)
        return "\n".join(out)
    except Exception as e:
        return f"[L·ªói ƒë·ªçc PDF] {e}"

def extract_text_from_docx(path: Path):
    if docx is None:
        return "[python-docx ch∆∞a c√†i]"
    try:
        d = docx.Document(path)
        return "\n".join(p.text for p in d.paragraphs)
    except Exception as e:
        return f"[L·ªói docx] {e}"

def extract_text_from_image(path: Path):
    if Image is None or pytesseract is None:
        return "[PIL/pytesseract ch∆∞a c√†i]"
    try:
        img = Image.open(path)
        return pytesseract.image_to_string(img, lang="vie+eng")
    except Exception as e:
        return f"[L·ªói OCR] {e}"

def extract_text_from_audio(path: Path):
    if sr is None:
        return "[SpeechRecognition ch∆∞a c√†i]"
    try:
        r = sr.Recognizer()
        with sr.AudioFile(str(path)) as src:
            audio = r.record(src)
        return r.recognize_google(audio, language="vi-VN")
    except Exception as e:
        return f"[L·ªói speech->text] {e}"

def read_excel_df(path: Path):
    if pd is None:
        return None, "[pandas ch∆∞a c√†i]"
    try:
        df = pd.read_excel(path)
        return df, None
    except Exception as e:
        return None, f"[L·ªói ƒë·ªçc Excel] {e}"

# ------------------------
# UI: small CSS & copy-to-clipboard helper
# ------------------------
st.markdown("""
<style>
.big-title { font-size:26px; font-weight:700; color:#0b3d91; }
.card { border-radius:10px; padding:14px; background: #fff; box-shadow: 0 4px 18px rgba(11, 61, 145, 0.06); }
.chat-user { background: #E6F0FF; padding:10px; border-radius:8px; }
.chat-ai { background: #F3F7FF; padding:10px; border-radius:8px; }
.small-muted { color:#6b7280; font-size:13px; }
</style>
""", unsafe_allow_html=True)

# copy-to-clipboard: use component HTML
def copy_button_js(text, key):
    # returns HTML that copies 'text' to clipboard when clicked
    escaped = text.replace("\\", "\\\\").replace("'", "\\'").replace("\n", "\\n")
    html = f"""
    <button onclick="navigator.clipboard.writeText('{escaped}')" style="padding:6px 10px;border-radius:6px;border:none;background:#0b63c4;color:white;cursor:pointer;">
        üìã Copy
    </button>
    """
    st.components.v1.html(html, height=40, key=key)

# standardized action buttons (Copy / Delete / Download)
def action_buttons_for_text(text: str, filename: str = "output.txt", file_bytes: bytes = None, key_prefix="act"):
    cols = st.columns([1,1,1])
    with cols[0]:
        # copy using JS
        try:
            copy_button_js(text, key=key_prefix+"_copy")
            st.caption("Sao ch√©p to√†n b·ªô n·ªôi dung")
        except Exception:
            st.button("üìã Copy", key=key_prefix+"_copy_fallback")
    with cols[1]:
        if st.button("üóë X√≥a", key=key_prefix+"_delete"):
            return "delete"
    with cols[2]:
        if file_bytes is not None:
            st.download_button("‚¨á T·∫£i v·ªÅ", file_bytes, file_name=filename, key=key_prefix+"_dl")
        else:
            st.download_button("‚¨á T·∫£i v·ªÅ (TXT)", text, file_name=filename, key=key_prefix+"_dl_txt")
    return None

# ------------------------
# Login screen
# ------------------------
def login_ui():
    st.markdown("<div class='big-title'>Ng·ªçcMinhCh√¢u AI ‚Äî ƒêƒÉng nh·∫≠p</div>", unsafe_allow_html=True)
    st.write("ƒêƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p Dashboard. (Phi√™n b·∫£n demo ‚Äî thay b·∫±ng OAuth/SSO khi production)")
    col1, col2 = st.columns([1,1])
    with col1:
        username = st.text_input("T√†i kho·∫£n")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        if st.button("ƒêƒÉng nh·∫≠p"):
            if username == ADMIN_USER and password == ADMIN_PASS:
                st.session_state['logged_in'] = True
                st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
                st.rerun()
            else:
                st.error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.")
    with col2:
        st.markdown("**H∆∞·ªõng d·∫´n nhanh**")
        st.write("- Th·ª≠ t√†i kho·∫£n m·∫∑c ƒë·ªãnh (ENV ADMIN_USER/ADMIN_PASS).")
        st.write("- Kh√¥ng l∆∞u API Key trong repo, ƒë·∫∑t tr√™n Render.")

if not st.session_state.get("logged_in", False):
    login_ui()
    st.stop()

# ------------------------
# Dashboard layout & menu
# ------------------------
st.sidebar.image("logo.png" if Path("logo.png").exists() else "https://i.ibb.co/0s3pdnc/sample-logo.png", width=130)
st.sidebar.markdown("## Ng·ªçcMinhCh√¢u AI")
menu = st.sidebar.radio("Ch·ªçn m·ª•c:", [
    "üè† Trang ch√≠nh",
    "üí¨ Chat v·ªõi NgocMinhChau",
    "üìë B√°o c√°o c·ªßa t√¥i",
    "üìú Quy ch·∫ø",
    "üìù C√¥ng vƒÉn",
    "üìä K·∫ø ho·∫°ch",
    "üîä Chuy·ªÉn vƒÉn b·∫£n -> Gi·ªçng n√≥i",
    "üé• Video c·ªßa t√¥i",
    "‚ûï Lo·∫°i kh√°c",
    "‚öôÔ∏è C·∫•u h√¨nh & G·ª≠i"
])

st.sidebar.markdown("---")
st.sidebar.markdown("L·∫≠p tr√¨nh: **ƒêo√†n Thanh Ch√¢u** ‚Äî SƒêT: 0966313456")
st.sidebar.markdown("[Facebook](https://facebook.com) ‚Ä¢ [Zalo](#) ‚Ä¢ [YouTube](#) ‚Ä¢ [TikTok](#)")

# Quick state defaults
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "last_output" not in st.session_state:
    st.session_state.last_output = ""
if "last_file_bytes" not in st.session_state:
    st.session_state.last_file_bytes = None
if "last_filename" not in st.session_state:
    st.session_state.last_filename = "output.txt"

# ------------------------
# Common: run AI safely
# ------------------------
def call_ai(prompt: str, system: str = None):
    if ai_pipeline is None:
        return f"[ai_core ch∆∞a s·∫µn s√†ng] {AI_CORE_ERROR or ''}"
    if not OPENAI_KEY:
        return "[OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh]"
    try:
        return ai_pipeline(prompt)
    except Exception as e:
        return f"[L·ªói khi g·ªçi AI] {e}"

# ------------------------
# Function: process uploaded file in background
# ------------------------
def background_process_file(path: Path, task_type: str = "report"):
    def job():
        txt = ""
        ext = path.suffix.lower()
        if ext == ".pdf":
            txt = extract_text_from_pdf(path)
        elif ext == ".docx":
            txt = extract_text_from_docx(path)
        elif ext in (".png", ".jpg", ".jpeg", ".tiff"):
            txt = extract_text_from_image(path)
        elif ext in (".wav", ".mp3", ".flac"):
            txt = extract_text_from_audio(path)
        elif ext in (".xls", ".xlsx", ".csv"):
            df, err = read_excel_df(path)
            if err:
                txt = err
            else:
                txt = df.to_string()
        else:
            try:
                txt = path.read_text(encoding="utf-8")
            except:
                txt = "[Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file]"

        if task_type == "report":
            prompt = f"B·∫°n l√† tr·ª£ l√Ω h√†nh ch√≠nh. T·ª´ n·ªôi dung sau, t·∫°o 1 b√°o c√°o h√†nh ch√≠nh r√µ r√†ng, c√≥ M·ª•c ti√™u, T√≥m t·∫Øt, Ph√¢n t√≠ch, K·∫øt lu·∫≠n, ƒê·ªÅ xu·∫•t:\n\n{txt[:6000]}"
            report = call_ai(prompt)
            out_path = OUTPUT_DIR / f"report_{path.stem}_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt"
            out_path.write_text(report, encoding="utf-8")
            add_history({"type":"report","source":path.name,"path":str(out_path),"timestamp":datetime.now().isoformat(),"preview":report[:800]})
        else:
            out_path = OUTPUT_DIR / f"processed_{path.stem}_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt"
            out_path.write_text(txt, encoding="utf-8")
            add_history({"type":"process","source":path.name,"path":str(out_path),"timestamp":datetime.now().isoformat(),"preview":txt[:800]})
        return str(out_path)
    fut = executor.submit(job)
    return fut

# ------------------------
# Menu handlers
# ------------------------

# --- Trang ch√≠nh
if menu == "üè† Trang ch√≠nh":
    st.markdown("<div class='big-title'>Ng·ªçcMinhCh√¢u AI ‚Äî Nhi·ªám v·ª• ho√†n th√†nh trong nh√°y m·∫Øt!</div>", unsafe_allow_html=True)
    st.write("H·ªá th·ªëng tr·ª£ gi√∫p c√¥ng ch·ª©c x√£: so·∫°n c√¥ng vƒÉn, b√°o c√°o, ph√¢n t√≠ch d·ªØ li·ªáu, g·ª≠i th√¥ng b√°o.")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.subheader("üí¨ Chat v·ªõi AI")
        st.write("Tr√≤ chuy·ªán, so·∫°n c√¥ng vƒÉn, h·ªó tr·ª£ so·∫°n th·∫£o.")
        if st.button("B·∫Øt ƒë·∫ßu Chat"):
            st.session_state['nav_to'] = "üí¨ Chat v·ªõi NgocMinhChau"
            st.rerun()
    with c2:
        st.subheader("üìë B√°o c√°o")
        st.write("Upload t√†i li·ªáu ‚Üí T·∫°o b√°o c√°o t·ª± ƒë·ªông.")
        if st.button("M·ªü B√°o c√°o"):
            st.session_state['nav_to'] = "üìë B√°o c√°o c·ªßa t√¥i"
            st.rerun()
    with c3:
        st.subheader("üìä Ph√¢n t√≠ch Excel")
        st.write("Ph√¢n t√≠ch s·ªë li·ªáu, ph√°t hi·ªán b·∫•t th∆∞·ªùng.")
        if st.button("M·ªü Ph√¢n t√≠ch"):
            st.session_state['nav_to'] = "üìä K·∫ø ho·∫°ch"
            st.rerun()

# --- Chat
elif menu == "üí¨ Chat v·ªõi NgocMinhChau":
    st.header("üí¨ Chat tr·ª±c ti·∫øp v·ªõi NgocMinhChau")
    st.markdown("Ch·ªçn ch·∫ø ƒë·ªô: ", unsafe_allow_html=True)
    chat_mode = st.radio("Ch·∫ø ƒë·ªô Chat:", ["Tr·ª£ l√Ω h√†nh ch√≠nh", "So·∫°n c√¥ng vƒÉn", "So·∫°n b√°o c√°o", "Truy v·∫•n vƒÉn b·∫£n"])
    with st.form("chat_form"):
        user_input = st.text_area("Nh·∫≠p y√™u c·∫ßu:", height=160)
        submitted = st.form_submit_button("G·ª≠i")
        if submitted and user_input.strip():
            sys_prompt = {
                "Tr·ª£ l√Ω h√†nh ch√≠nh": "B·∫°n l√† tr·ª£ l√Ω h√†nh ch√≠nh, tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng.",
                "So·∫°n c√¥ng vƒÉn": "B·∫°n l√† chuy√™n gia so·∫°n th·∫£o c√¥ng vƒÉn theo m·∫´u h√†nh ch√≠nh Vi·ªát Nam.",
                "So·∫°n b√°o c√°o": "B·∫°n l√† chuy√™n gia vi·∫øt b√°o c√°o h√†nh ch√≠nh chi ti·∫øt.",
                "Truy v·∫•n vƒÉn b·∫£n": "B·∫°n l√† tr·ª£ l√Ω ph√°p l√Ω, tr·∫£ l·ªùi c√≥ d·∫´n ngu·ªìn (n·∫øu c√≥)."
            }.get(chat_mode, "")
            with st.spinner("AI ƒëang x·ª≠ l√Ω..."):
                ans = call_ai(user_input, system=sys_prompt)
            # save to session & history
            st.session_state.chat_history.append({"role":"user","text":user_input,"ts":datetime.now().isoformat()})
            st.session_state.chat_history.append({"role":"ai","text":ans,"ts":datetime.now().isoformat()})
            add_history({"type":"chat","mode":chat_mode,"prompt":user_input,"response":ans,"timestamp":datetime.now().isoformat()})
            st.session_state.last_output = ans
            st.session_state.last_filename = f"chat_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt"
            st.session_state.last_file_bytes = None
            st.experimental_rerun()
    st.markdown("### Phi√™n g·∫ßn ƒë√¢y")
    for item in reversed(st.session_state.chat_history[-10:]):
        if item["role"] == "user":
            st.markdown(f"<div class='chat-user'>**B·∫°n:** {item['text']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div class='chat-ai'>**AI:** {item['text']}</div>", unsafe_allow_html=True)
    if st.session_state.last_output:
        st.markdown("### K·∫øt qu·∫£ m·ªõi nh·∫•t")
        st.text_area("K·∫øt qu·∫£", st.session_state.last_output, height=240)
        res = action_buttons_for_text(st.session_state.last_output, filename=st.session_state.last_filename, file_bytes=st.session_state.last_file_bytes, key_prefix="chat_last")
        if res == "delete":
            st.session_state.last_output = ""
            st.session_state.last_file_bytes = None
            st.session_state.last_filename = "output.txt"
            st.rerun()

# --- B√°o c√°o
elif menu == "üìë B√°o c√°o c·ªßa t√¥i":
    st.header("üìë B√°o c√°o")
    st.write("Upload t√†i li·ªáu (PDF/DOCX/Excel/Image/Audio) ƒë·ªÉ AI tr√≠ch xu·∫•t v√† sinh b√°o c√°o.")
    uploaded = st.file_uploader("T·∫£i l√™n t√†i li·ªáu", accept_multiple_files=False)
    if uploaded:
        target = INPUT_DIR / uploaded.name
        with open(target, "wb") as f:
            f.write(uploaded.getbuffer())
        st.success(f"ƒê√£ l∆∞u: {uploaded.name}")
        # tr√≠ch xu·∫•t preview
        ext = target.suffix.lower()
        txt_preview = ""
        if ext == ".pdf":
            txt_preview = extract_text_from_pdf(target)
        elif ext == ".docx":
            txt_preview = extract_text_from_docx(target)
        elif ext in (".png", ".jpg", ".jpeg", ".tiff"):
            txt_preview = extract_text_from_image(target)
        elif ext in (".wav", ".mp3", ".flac"):
            txt_preview = extract_text_from_audio(target)
        elif ext in (".xls", ".xlsx", ".csv"):
            df, err = read_excel_df(target)
            if err:
                txt_preview = err
            else:
                txt_preview = df.head(200).to_string()
        else:
            try:
                txt_preview = uploaded.getvalue().decode(errors="ignore")
            except:
                txt_preview = "[Kh√¥ng th·ªÉ ƒë·ªçc file]"
        st.text_area("N·ªôi dung tr√≠ch xu·∫•t (xem nhanh)", txt_preview[:8000], height=260)
        if st.button("T·∫°o b√°o c√°o b·∫±ng AI"):
            fut = background_process_file(target, task_type="report")
            st.info("ƒê√£ b·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o trong n·ªÅn. Ki·ªÉm tra tab L·ªãch s·ª≠ khi ho√†n th√†nh.")

    st.markdown("### B√°o c√°o ƒë√£ t·∫°o")
    out_files = sorted(OUTPUT_DIR.glob("report_*.txt"), key=lambda p: p.stat().st_mtime, reverse=True)
    for f in out_files[:10]:
        st.markdown(f"**{f.name}** ‚Äî {datetime.fromtimestamp(f.stat().st_mtime).isoformat()}")
        content = f.read_text(encoding="utf-8")
        st.text_area("Preview", content[:1500], height=180, key=f.name)
        # actions
        file_bytes = content.encode("utf-8")
        act = action_buttons_for_text(content, filename=f.name, file_bytes=file_bytes, key_prefix=f"report_{f.name}")
        if act == "delete":
            try:
                f.unlink()
                st.success("ƒê√£ x√≥a file.")
                st.experimental_rerun()
            except Exception as e:
                st.error(f"L·ªói x√≥a: {e}")

# --- Quy ch·∫ø
elif menu == "üìú Quy ch·∫ø":
    st.header("üìú Quy ch·∫ø")
    st.write("Kho vƒÉn b·∫£n quy ch·∫ø ‚Äî upload t√†i li·ªáu quy ch·∫ø ƒë·ªÉ h·ªá th·ªëng l∆∞u tr·ªØ v√† cho ph√©p truy v·∫•n/nghi√™n c·ª©u.")
    uploaded = st.file_uploader("Upload file quy ch·∫ø (PDF/DOCX)", key="quyche")
    if uploaded:
        t = INPUT_DIR / uploaded.name
        with open(t, "wb") as f:
            f.write(uploaded.getbuffer())
        st.success("ƒê√£ l∆∞u quy ch·∫ø")
        add_history({"type":"quyche","path":str(t),"timestamp":datetime.now().isoformat(),"preview":uploaded.name})

# --- C√¥ng vƒÉn
elif menu == "üìù C√¥ng vƒÉn":
    st.header("üìù So·∫°n c√¥ng vƒÉn")
    with st.form("congvan_form"):
        cv_title = st.text_input("Ti√™u ƒë·ªÅ")
        cv_recipient = st.text_input("K√≠nh g·ª≠i")
        cv_body = st.text_area("N·ªôi dung ch√≠nh", height=220)
        add_signature = st.checkbox("Ch√®n ch·ªØ k√Ω / con d·∫•u (t·∫£i ·∫£nh)", value=False)
        signature_file = None
        if add_signature:
            signature_file = st.file_uploader("T·∫£i ·∫£nh ch·ªØ k√Ω / con d·∫•u", type=["png","jpg","jpeg"], key="sig")
        sub = st.form_submit_button("So·∫°n c√¥ng vƒÉn")
        if sub:
            prompt = f"So·∫°n c√¥ng vƒÉn theo m·∫´u h√†nh ch√≠nh Vi·ªát Nam.\nTi√™u ƒë·ªÅ: {cv_title}\nK√≠nh g·ª≠i: {cv_recipient}\nN·ªôi dung: {cv_body}"
            with st.spinner("AI ƒëang so·∫°n c√¥ng vƒÉn..."):
                doc = call_ai(prompt)
            # save
            outp = OUTPUT_DIR / f"congvan_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt"
            outp.write_text(doc, encoding="utf-8")
            add_history({"type":"congvan","title":cv_title,"path":str(outp),"timestamp":datetime.now().isoformat(),"preview":doc[:400]})
            st.success("ƒê√£ t·∫°o c√¥ng vƒÉn")
            st.text_area("C√¥ng vƒÉn", doc, height=300)
            # if signature, append img note (for display/download user can combine externally)
            if signature_file:
                st.image(signature_file, caption="Ch·ªØ k√Ω / con d·∫•u", width=200)

    # actions for last created
    last_congvan = sorted(OUTPUT_DIR.glob("congvan_*.txt"), key=lambda p:p.stat().st_mtime, reverse=True)
    if last_congvan:
        f = last_congvan[0]
        cont = f.read_text(encoding="utf-8")
        st.markdown("### C√¥ng vƒÉn m·ªõi nh·∫•t")
        st.text_area("Preview", cont, height=180)
        act = action_buttons_for_text(cont, filename=f.name, file_bytes=cont.encode("utf-8"), key_prefix="cv_latest")
        if act == "delete":
            try:
                f.unlink()
                st.success("ƒê√£ x√≥a c√¥ng vƒÉn")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói x√≥a: {e}")

# --- K·∫ø ho·∫°ch
elif menu == "üìä K·∫ø ho·∫°ch":
    st.header("üìä K·∫ø ho·∫°ch")
    st.write("So·∫°n k·∫ø ho·∫°ch ho·∫∑c ph√¢n t√≠ch d·ªØ li·ªáu ƒë·ªÉ sinh k·∫ø ho·∫°ch.")
    plan_text = st.text_area("M√¥ t·∫£/·ª©ng d·ª•ng c·∫ßn l·∫≠p k·∫ø ho·∫°ch", height=200)
    if st.button("T·∫°o k·∫ø ho·∫°ch b·∫±ng AI"):
        with st.spinner("AI ƒëang t·∫°o k·∫ø ho·∫°ch..."):
            plan = call_ai(f"T·ª´ n·ªôi dung sau, l·∫≠p k·∫ø ho·∫°ch chi ti·∫øt:\n\n{plan_text}")
        out = OUTPUT_DIR / f"kehoach_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt"
        out.write_text(plan, encoding="utf-8")
        add_history({"type":"kehoach","path":str(out),"timestamp":datetime.now().isoformat(),"preview":plan[:400]})
        st.success("ƒê√£ t·∫°o k·∫ø ho·∫°ch")
        st.text_area("K·∫ø ho·∫°ch", plan, height=300)
        act = action_buttons_for_text(plan, filename=out.name, file_bytes=plan.encode("utf-8"), key_prefix="plan_latest")
        if act == "delete":
            out.unlink()
            st.success("ƒê√£ x√≥a k·∫ø ho·∫°ch")
            st.rerun()

# --- TTS
elif menu == "üîä Chuy·ªÉn vƒÉn b·∫£n -> Gi·ªçng n√≥i":
    st.header("üîä Text ‚Üí Speech")
    tts_text = st.text_area("Nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn sang gi·ªçng n√≥i", height=240)
    tts_lang = st.selectbox("Ng√¥n ng·ªØ", ["vi", "en"])
    if st.button("T·∫°o audio"):
        if gTTS is None:
            st.error("gTTS ch∆∞a c√†i. C√†i th√™m gTTS v√†o requirements ƒë·ªÉ d√πng TTS.")
        else:
            try:
                mp = io.BytesIO()
                t = gTTS(tts_text, lang=tts_lang)
                t.write_to_fp(mp)
                mp.seek(0)
                b = mp.read()
                st.audio(b, format="audio/mp3")
                st.session_state.last_file_bytes = b
                st.session_state.last_filename = f"tts_{datetime.now().strftime('%Y%m%d%H%M%S')}.mp3"
                add_history({"type":"tts","timestamp":datetime.now().isoformat(),"preview":tts_text[:200]})
                act = action_buttons_for_text(tts_text, filename=st.session_state.last_filename, file_bytes=b, key_prefix="tts_latest")
                if act == "delete":
                    st.session_state.last_file_bytes = None
                    st.session_state.last_filename = "output.mp3"
                    st.rerun()
            except Exception as e:
                st.error(f"L·ªói t·∫°o audio: {e}")

# --- Video (placeholder)
elif menu == "üé• Video c·ªßa t√¥i":
    st.header("üé• Qu·∫£n l√Ω Video")
    v = st.file_uploader("Upload video (hi·ªán l∆∞u placeholder)", type=["mp4","mov","avi"])
    if v:
        t = INPUT_DIR / v.name
        with open(t, "wb") as f:
            f.write(v.getbuffer())
        st.success("ƒê√£ l∆∞u video. (X·ª≠ l√Ω video n√¢ng cao c√≥ th·ªÉ th√™m sau)")

# --- Lo·∫°i kh√°c
elif menu == "‚ûï Lo·∫°i kh√°c":
    st.header("‚ûï Lo·∫°i kh√°c")
    st.write("C√°c ch·ª©c nƒÉng m·ªü r·ªông: t√≠ch h·ª£p c·ªïng th√¥ng tin, API ch√≠nh ph·ªß, m·∫´u t√†i li·ªáu ƒë·∫∑c th√π...")

# --- C·∫•u h√¨nh & g·ª≠i
elif menu == "‚öôÔ∏è C·∫•u h√¨nh & G·ª≠i":
    st.header("‚öôÔ∏è C·∫•u h√¨nh & G·ª≠i")
    st.markdown("ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng tr√™n Render ho·∫∑c .env (kh√¥ng push v√†o GitHub).")
    st.write("C√°c bi·∫øn quan tr·ªçng: OPENAI_API_KEY, EMAIL_USER, EMAIL_PASSWORD, ZALO_ACCESS_TOKEN, ZALO_USER_ID")
    st.markdown("### G·ª≠i th·ª≠ Email / Zalo")
    col1, col2 = st.columns(2)
    with col1:
        to = st.text_input("G·ª≠i t·ªõi (email)", value=os.getenv("EMAIL_USER",""))
        subj = st.text_input("Ti√™u ƒë·ªÅ", value="Th√¥ng b√°o t·ª´ NgocMinhChauAI")
        body = st.text_area("N·ªôi dung", value="N·ªôi dung test", height=160)
        if st.button("G·ª≠i Email th·ª≠"):
            if send_email is None:
                st.error("H√†m send_email ch∆∞a c√≥ (ki·ªÉm tra utils.py).")
            else:
                ok, msg = send_email(subj, body, to)
                if ok: st.success("G·ª≠i email th√†nh c√¥ng")
                else: st.error(f"L·ªói g·ª≠i email: {msg}")
    with col2:
        zmsg = st.text_area("N·ªôi dung Zalo", value="Test Zalo", height=160)
        if st.button("G·ª≠i Zalo th·ª≠"):
            if send_zalo_message is None:
                st.error("H√†m send_zalo_message ch∆∞a c√≥ (ki·ªÉm tra utils.py).")
            else:
                ok, msg = send_zalo_message(zmsg)
                if ok: st.success("G·ª≠i Zalo th√†nh c√¥ng")
                else: st.error(f"L·ªói g·ª≠i Zalo: {msg}")

# ------------------------
# L·ªãch s·ª≠ & Backup (common foot)
# ------------------------
st.markdown("---")
st.markdown("### L·ªãch s·ª≠ & Sao l∆∞u")
history = load_history()
if history:
    st.write(f"T·ªïng b·∫£n ghi: {len(history)}")
    if st.button("X√≥a to√†n b·ªô l·ªãch s·ª≠"):
        save_history([])
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠")
    if st.button("T·∫°o ZIP backup to√†n b·ªô file output"):
        ts = datetime.now().strftime("%Y%m%d%H%M%S")
        zf = OUTPUT_DIR / f"backup_reports_{ts}.zip"
        with zipfile.ZipFile(zf, "w") as z:
            for f in OUTPUT_DIR.glob("*"):
                z.write(f, arcname=f.name)
        with open(zf, "rb") as fh:
            st.download_button("T·∫£i ZIP backup", fh, file_name=zf.name)
else:
    st.info("Hi·ªán ch∆∞a c√≥ b·∫£n ghi n√†o.")

st.markdown("---")
st.markdown("¬© Ng·ªçcMinhCh√¢u AI ‚Äî Thi·∫øt k·∫ø theo y√™u c·∫ßu. Li√™n h·ªá: ƒêo√†n Thanh Ch√¢u ‚Äî 0966313456")
